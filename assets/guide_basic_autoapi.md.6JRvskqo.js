import{_ as i,c as a,o as n,ak as e}from"./chunks/framework.Be0JZvgR.js";const E=JSON.parse('{"title":"自动API控制器","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/basic/autoapi.md","filePath":"guide/basic/autoapi.md","lastUpdated":1744771947000}'),l={name:"guide/basic/autoapi.md"};function t(p,s,h,r,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="自动api控制器" tabindex="-1">自动API控制器 <a class="header-anchor" href="#自动api控制器" aria-label="Permalink to &quot;自动API控制器&quot;">​</a></h1><ul><li>创建应用程序服务后，您通常需要创建一个API控制器，以将此服务公开为 HTTP（REST） API 终端节点。API控制器只将方法调用重定向到应用程序服务，并使用 [HttpGet]、[HttpPost]、[Route]...等。</li><li>ABP按照约定将您的应用程序服务配置为 API 控制器。</li></ul><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><ul><li>基本配置很简单。只需配置并使用方法，如下所示：AbpAspNetCoreMvcOptionsConventionalControllers.Create</li></ul><div class="language-csharp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BookStoreApplicationModule)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BookStoreWebModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbpModule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PreConfigureServices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ServiceConfigurationContext</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PreConfigure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbpAspNetCoreMvcOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .ConventionalControllers</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 创建BookStoreApplicationModule模块下的自动api</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BookStoreApplicationModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).Assembly);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 如果单纯的不需要某一个控制器，可以这么移除，还可以在service上添加[RemoteService(IsEnabled = false)]特性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options.ControllersToRemove.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbpLanguagesController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>BookStoreApplicationModule模块下的service都会在swagger上显示</li></ul><h2 id="iremoteservice-接口" tabindex="-1">IRemoteService 接口 <a class="header-anchor" href="#iremoteservice-接口" aria-label="Permalink to &quot;IRemoteService 接口&quot;">​</a></h2><ul><li>如果一个类实现了IRemoteService接口，则会自动选择它作为API控制器。</li></ul><h2 id="命名约定" tabindex="-1">命名约定 <a class="header-anchor" href="#命名约定" aria-label="Permalink to &quot;命名约定&quot;">​</a></h2><ul><li>Get：如果方法名称以 &#39;GetList&#39;、&#39;GetAll&#39; 或 &#39;Get&#39; 开头，则使用。</li><li>Put：如果方法名称以 &#39;Put&#39; 或 &#39;Update&#39; 开头，则使用。</li><li>Delete：如果方法名称以 &#39;Delete&#39; 或 &#39;Remove&#39; 开头，则使用。</li><li>Post：如果方法名称以 &#39;Create&#39;、&#39;Add&#39;、&#39;Insert&#39; 或 &#39;Post&#39; 开头，则使用。</li><li>Patch：如果方法名称以 &#39;Patch&#39; 开头，则使用。</li><li>默认Post</li></ul>`,10)]))}const c=i(l,[["render",t]]);export{E as __pageData,c as default};
