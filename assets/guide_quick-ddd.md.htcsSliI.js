import{_ as o,c as i,o as a,ak as l}from"./chunks/framework.DqPi66mX.js";const h=JSON.parse('{"title":"领域驱动设计","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/quick-ddd.md","filePath":"guide/quick-ddd.md","lastUpdated":1739243664000}'),t={name:"guide/quick-ddd.md"};function n(r,e,d,c,s,u){return a(),i("div",null,e[0]||(e[0]=[l('<h1 id="领域驱动设计" tabindex="-1">领域驱动设计 <a class="header-anchor" href="#领域驱动设计" aria-label="Permalink to &quot;领域驱动设计&quot;">​</a></h1><h2 id="什么是ddd" tabindex="-1">什么是DDD? <a class="header-anchor" href="#什么是ddd" aria-label="Permalink to &quot;什么是DDD?&quot;">​</a></h2><p>ABP框架提供的<strong>基础设施</strong>使基于<strong>领域驱动设计</strong>的开发更易实现. DDD在<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91" target="_blank" rel="noreferrer">维基百科中的定义</a>如下:</p><blockquote><p><strong>领域驱动设计(DDD)</strong> 是一种通过将实现连接到持续进化的模型来满足复杂需求的软件开发方法. 领域驱动设计的前提是:</p><ul><li>把项目的主要重点放在核心领域和领域逻辑上</li><li>把复杂的设计放在领域模型上</li><li>发起技术专家和领域专家之间的创造性协作,以迭代方式完善解决特定领域问题的概念模型</li></ul></blockquote><h2 id="项目分层" tabindex="-1">项目分层 <a class="header-anchor" href="#项目分层" aria-label="Permalink to &quot;项目分层&quot;">​</a></h2><p>ABP框架遵循DDD原则和模式去实现分层应用程序模型,该模型由四个基本层组成:</p><ul><li><strong>表示层</strong>: 为用户提供接口. 使用_应用层_实现与用户交互. <ul><li>这里我们是vben admin 前后端分离的方式</li></ul></li><li><strong>应用层</strong>: 表示层与领域层的中介,编排业务对象执行特定的应用程序任务. 使用应用程序逻辑实现用例. <ul><li>在abp中就是xx.Application和 xx.Application.Contract层</li></ul></li><li><strong>领域层</strong>: 包含业务对象以及业务规则. 是应用程序的核心. <ul><li>在abp中就是xx.Domain和xx.Domain.Shared层</li></ul></li><li><strong>基础设施层</strong>: 提供通用的技术功能,支持更高的层,主要使用第三方类库. <ul><li>在abp中就是xx.EntityFrameworkCore层</li></ul></li></ul><h2 id="解决方案说明" tabindex="-1">解决方案说明: <a class="header-anchor" href="#解决方案说明" aria-label="Permalink to &quot;解决方案说明:&quot;">​</a></h2><ul><li>下图是使用Cli的创建的解决方案: <img src="https://lion-foods.oss-cn-beijing.aliyuncs.com/vben5/app.png" alt=""></li></ul><h3 id="_0-solution-items" tabindex="-1">0.Solution Items <a class="header-anchor" href="#_0-solution-items" aria-label="Permalink to &quot;0.Solution Items&quot;">​</a></h3><ul><li>这个下面是一些关于nuget的设置</li><li>Directory.Build.targets如果存在这个文件,dotnet会自动发现这个</li><li>global.json 设置dotnet版本</li><li>NuGet.Config 设置nuget的地址</li></ul><h3 id="展现层" tabindex="-1">展现层 <a class="header-anchor" href="#展现层" aria-label="Permalink to &quot;展现层&quot;">​</a></h3><ul><li>abp vnext pro 提供vben2.8和vben5的版本</li></ul><h3 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h3><ul><li>应用层也被分为了两个项目: <ul><li>Lion.AbpPro.CodeManagement.Application.Contracts包含接口的定义及接口依赖的DTO,此项目可以被展现层或其它客户端应用程序引用.</li><li>Lion.AbpPro.CodeManagement.Application是应用层中必需的,它实现了Lion.AbpPro.CodeManagementApplication.Contracts项目中定义的接口.</li></ul></li></ul><h3 id="领域层" tabindex="-1">领域层 <a class="header-anchor" href="#领域层" aria-label="Permalink to &quot;领域层&quot;">​</a></h3><ul><li>领域层分为两个项目: <ul><li>Lion.AbpPro.CodeManagement.Domain是领域层中必需的,它包含之前介绍的构建组成(实体,值对象,领域服务,规约,仓储接口等).</li><li>Lion.AbpPro.CodeManagement.Domain.Shared是领域层中很薄的项目,它只包含领域层与其它层共享的数据类型的定义.例如,枚举,常量等.</li></ul></li></ul><h3 id="远程服务层" tabindex="-1">远程服务层 <a class="header-anchor" href="#远程服务层" aria-label="Permalink to &quot;远程服务层&quot;">​</a></h3><ul><li>Lion.AbpPro.CodeManagement.HttpApi包含了HTTP API的定义.它通常包含MVC Controller 和 Model(如果有).因此,你可以在此项目中提供HTTP API.</li></ul><ul><li>Lion.AbpPro.CodeManagement.HttpApi.Client当C#客户端应用程序需要调用IssueTracking.HttpApi的API时,这个项目非常有用.客户端程序仅需引用此项目就可以通过依赖注入方式,远程调用应用服务.它是通过ABP框架的动态C#客户端API代理系统来实现的.</li></ul><h3 id="基础设施层" tabindex="-1">基础设施层 <a class="header-anchor" href="#基础设施层" aria-label="Permalink to &quot;基础设施层&quot;">​</a></h3><ul><li>你可能只创建一个基础设施项目来完成所有抽象类的定义及外部类的集成,又或者为不同的依赖创建多个不同的项目.</li><li>我们建议采用一种平衡的方法:为主要的依赖的库(例如 Entity Framework Core)创建一个独立的项目,为其它的依赖库创建一个公共的基础设施项目.</li><li>解决方案中包含两个用于集成Entity Framework Core的项目: <ul><li>Lion.AbpPro.CodeManagement.EntityFrameworkCore是必需的,因为需要集成EF Core.应用程序的数据库上下文(DbContext),数据库对象映射,仓储接口的实现,以及其它与EF Core相关的内容都位于此项目中.</li><li>Lion.AbpPro.CodeManagement.EntityFrameworkCore.DbMigrations是管理Code First方式数据库迁移记录的特殊项目.此项目定义了一个独立的DbContext来追踪迁移记录.只有当添加一个新的数据库迁移记录或添加一个新的应用模块时,才会使用此项目,否则,其它情况无需修改此项目内容.</li></ul></li></ul><h2 id="项目依赖关系" tabindex="-1">项目依赖关系 <a class="header-anchor" href="#项目依赖关系" aria-label="Permalink to &quot;项目依赖关系&quot;">​</a></h2><p><img src="https://lion-foods.oss-cn-beijing.aliyuncs.com/vben5/project.png" alt=""></p><p>之前已介绍了这些项目.现在,我们来解释依赖的原因:</p><ul><li><code>Domain.Shared</code> 所有项目直接或间接依赖此项目.此项目中的所有类型都可以被其它项目所引用.</li><li><code>Domain</code> 仅依赖<code>Domain.Shared</code>项目,因为<code>Domain.Shared</code>本就属于领域层的一部分.例如,<code>Domain.Shared</code>项目中的枚举类型 <code>IssueType</code> 被<code>Domain</code>项目中的<code>Issue</code>实体所引用.</li><li><code>Application.Contracts</code> 依赖<code>Domain.Shared</code>项目,可以在DTO中重用<code>Domain.Shared</code>中的类型.例如,<code>Domain.Shared</code>项目中的枚举类型 <code>IssueType</code> 同样被<code>Contracts</code>项目中的<code>CreateIssueDto</code>DTO所引用.</li><li><code>Application</code> 依赖<code>Application.Contracts</code>项目,因为此项目需要实现应用服务的接口及接口使用的DTO.另外也依赖<code>Domain</code>项目,因为应用服务的实现必须依赖领域层中的对象.</li><li><code>EntityFrameworkCore</code> 依赖<code>Domain</code>项目,因为此项目需要将领域对象(实体或值对象)映射到数据库的表,另外还需要实现<code>Domain</code>项目中的仓储接口.</li><li><code>HttpApi</code> 依赖<code>Application.Contracts</code>项目,因为Controllers需要注入应用服务.</li><li><code>HttpApi.Client</code> 依赖<code>Application.Contracts</code>项目,因为此项目需要使用应用服务.</li><li><code>Web</code> 依赖<code>HttpApi</code>项目,因为此项目对外提供HTTP APIs.另外Pages或Components 需要使用应用服务,所以还间接依赖了<code>Application.Contracts</code>项目</li></ul>',26)]))}const m=o(t,[["render",n]]);export{h as __pageData,m as default};
